/*
 * SimpleClassGenerator.java
 *
 * 10.09.2009
 *
 * (c) by ollie
 *
 */

package archimedes.legacy.builder;

import gengen.generator.AbstractCodeGenerator;
import gengen.metadata.AttributeMetaData;
import gengen.metadata.ClassMetaData;

public class SimpleClassCodeGenerator extends AbstractCodeGenerator {

	public SimpleClassCodeGenerator() {
		super();
	}

	/* Implementierung des Interfaces CodeGenerator. */

	public String generate(ClassMetaData cmd) {
		StringBuffer source = new StringBuffer();
		AttributeMetaData amd = null;
		int i = 0;
		int leni = 0;
		source.append("/*\n");
		source.append(" * $CLASSNAME$.java\n");
		source.append(" *\n");
		source.append(" * $DATE$\n");
		source.append(" *\n");
		source.append(" * (c) by $VENDOR$\n");
		source.append(" *\n");
		source.append(" * GENERATED BY GENGEN.\n");
		source.append(" *\n");
		source.append(" * Better do not change this code!\n");
		source.append(" *\n");
		source.append(" */\n");
		source.append("\n");
		source.append("package $BASEPACKAGE$.scheme;\n");
		source.append("\n");
		source.append("\n");
		source.append("/**\n");
		source.append(" * Diese Klasse repr&auml;sentiert ein $CLASSNAME$ des Systems.\n");
		source.append(" *\n");
		source.append(" * @author $AUTHOR$\n");
		source.append(" *\n");
		source.append(" * @changed *** $DATE$ - Automatisch generiert.\n");
		source.append(" *\n");
		source.append(" */\n");
		source.append("\n");
		source.append("public class $CLASSNAME$ {\n");
		source.append("\n");
		source.append(this.getAttributeDefinition(cmd));
		source.append("\n");
		source.append("    /** Generiert einen Konstruktor mit Defaultwerten. */\n");
		source.append("    public $CLASSNAME$() {\n");
		source.append("        super();\n");
		source.append("    }\n");
		source.append("\n");
		for (i = 0, leni = cmd.getAttributes().size(); i < leni; i++) {
			amd = cmd.getAttribute(i);
			source.append("    public " + amd.getJavaType() + " "
					+ (amd.getJavaType().equalsIgnoreCase("boolean") ? "is" : "get") + amd.getName() + "() {\n");
			source.append("        return this." + amd.getName().toLowerCase() + ";\n");
			source.append("    }\n");
			source.append("\n");
		}
		for (i = 0, leni = cmd.getAttributes().size(); i < leni; i++) {
			amd = cmd.getAttribute(i);
			source.append("    public void set" + amd.getName() + "(" + amd.getJavaType() + " p) {\n");
			if (amd.getJavaType().equals("String")) {
				source.append("        if (p == null) {\n");
				source.append("            p = \"\";\n");
				source.append("        }\n");
			}
			source.append("        this." + amd.getName().toLowerCase() + " = p;\n");
			source.append("    }\n");
			source.append("\n");
		}
		source.append("\n");
		source.append("}\n");
		source = this.replaceClassWildCards(source, cmd);
		source = this.replaceModelWildCards(source, cmd.getModel());
		return source.toString();
	}

	public String getCompleteClassName(ClassMetaData cmd) {
		return "$CLASSNAME$".replace("$CLASSNAME$", cmd.getName());
	}

}
