/*
 * SimplePersistenceClassCodeGenerator.java
 *
 * 11.09.2009
 *
 * (c) by ollie
 *
 */

package archimedes.legacy.builder;


import gengen.generator.*;
import gengen.metadata.*;


public class SimplePersistenceClassCodeGenerator extends AbstractCodeGenerator {

    public SimplePersistenceClassCodeGenerator() {
        super();
    }


    /* Implementierung des Interfaces CodeGenerator. */

    public String generate(ClassMetaData cmd) {
        StringBuffer source = new StringBuffer();
        AttributeMetaData amd = null;
        int i = 0;
        int leni = 0;
        source.append("/*\n");
        source.append(" * $COMPLETECLASSNAME$.java\n");
        source.append(" *\n");
        source.append(" * $DATE$\n");
        source.append(" *\n");
        source.append(" * (c) by $VENDOR$\n");
        source.append(" *\n");
        source.append(" * GENERATED BY GENGEN.\n");
        source.append(" *\n");
        source.append(" * Better do not change this code!\n");
        source.append(" *\n");
        source.append(" */\n");
        source.append("\n");
        source.append("package $BASEPACKAGE$.scheme;\n");
        source.append("\n");
        source.append("\n");
        source.append("import corentx.ds.*;\n");
        source.append("\n");
        source.append("\n");
        source.append("/**\n");
        source.append(" * Diese Klasse bietet eine datenbankbezogene <TT>DataSource</TT> zur Klasse.\n");
        source.append(" *\n");
        source.append(" * @author $AUTHOR$\n");
        source.append(" *\n");
        source.append(" * @changed *** $DATE$ - Automatisch generiert.\n");
        source.append(" *\n");
        source.append(" */\n");
        source.append("\n");
        source.append("public class $COMPLETECLASSNAME$ implements DataSource<$CLASSNAME$, Long> {\n");
        source.append("\n");
        source.append("    /* Die Verbindungsdaten zur Datenbank. */\n");
        source.append("    JDBCDataSourceRecord dsr = null;\n");
        source.append("\n");
        source.append("    /**\n");
        source.append("     * Generiert eine $COMPLETECLASSNAME$ anhand der &uuml;bergebenen Parameter.\n");
        source.append("     *\n");
        source.append("     * @param dsr Die Verbindungsdaten zur Arbeit mit der Datenbank.\n");
        source.append("     */\n");
        source.append("    public $CLASSNAME$DataSource(JDBCDataSourceRecord dsr) {\n");
        source.append("        super();\n");
        source.append("        this.dsr = dsr;\n");
        source.append("    }\n");
        source.append("\n");
        source.append("    private Connection getConnection(JDBCDataSourceRecord dsr) {\n");
        source.append("        Connection c = null;\n");
        source.append("        try {\n");
        source.append("            Class.forName(dsr.getDriver());\n");
        source.append("            c = DriverManager.getConnection(dsr.getDBName(), dsr.getUser(), dsr.getPassword());\n");
        source.append("        } catch (ClassNotFoundException cnfe) {\n");
        source.append("            cnfe.printStackTrace();\n");
        source.append("        }\n");
        source.append("        return c;\n");
        source.append("    }\n");
        source.append("\n");
        source.append("    /* Implementierung des Interfaces DataSource. */\n");
        source.append("\n");
        source.append("    public $CLASSNAME$ get(Long k) {\n");
        source.append("        $CLASSNAME$ o = null;\n");
        source.append("        Connection c = this.getConnection(this.dsr);;\n");
        source.append("        ResultSet rs = null;\n");
        source.append("        Statement stmt = c.createStatement();\n");
        source.append("        String attrlist = \"" + this.getAttributeNameList(cmd) + "\";\n");
        source.append("        rs = stmt.executeQuery(\"select \" + attrlist + \" from $CLASSNAME$ where $KEY$ = \"\n");
        source.append("                + k.longValue());\n");
        source.append("        while (rs.next()) {\n");
        source.append("            o = new $CLASSNAME$();\n");
        for (i = 0, leni = cmd.getAttributes().size(); i < leni; i++) {
            amd = cmd.getAttribute(i);
            source.append(this.getReadStatement(amd, 12, i));
        }
        source.append("        }\n");
        source.append("        rs.close();\n");
        source.append("        stmt.close();\n");
        source.append("        c.close();\n");
        source.append("    }\n");
        source.append("\n");
        source.append("    public $CLASSNAME$ put($CLASSNAME$ t) {\n");
        source.append("    }\n");
        source.append("\n");
        for (i = 0, leni = cmd.getAttributes().size(); i < leni; i++) {
            amd = cmd.getAttribute(i);
            source.append("    public " + amd.getJavaType() + " " 
                    + (amd.getJavaType().equalsIgnoreCase("boolean") ? "is" : "get")
                    + amd.getName() + "() {\n");
            source.append("        return this." + amd.getName().toLowerCase() + ";\n");
            source.append("    }\n");
            source.append("\n");
        }
        for (i = 0, leni = cmd.getAttributes().size(); i < leni; i++) {
            amd = cmd.getAttribute(i);
            source.append("    public void set" + amd.getName() + "(" + amd.getJavaType() + " p) {\n");
            if (amd.getJavaType().equals("String")) {
                source.append("        if (p == null) {\n");
                source.append("            p = \"\";\n");
                source.append("        }\n");
            }
            source.append("        this." + amd.getName().toLowerCase() + " = p;\n");
            source.append("    }\n");
            source.append("\n");
        }
        source.append("\n");
        source.append("}\n");
        source = this.replaceClassWildCards(source, cmd);
        source = this.replaceModelWildCards(source, cmd.getModel());
        return source.toString();
    }

    public String getCompleteClassName(ClassMetaData cmd) {
        return "$CLASSNAME$DataSource".replace("$CLASSNAME$", cmd.getName());
    }

}
