package ${PackageName};

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import com.vaadin.flow.component.AttachEvent;
import com.vaadin.flow.component.DetachEvent;
import com.vaadin.flow.component.dependency.CssImport;
import com.vaadin.flow.router.BeforeEnterEvent;
import com.vaadin.flow.router.BeforeEvent;
import com.vaadin.flow.router.QueryParameters;
import com.vaadin.flow.router.Route;

#foreach ($ImportDeclaration in $ImportDeclarations.toList())
import ${ImportDeclaration.getSingleImportDeclaration()};
#end
import ${ResourceManagerPackageName}.${ResourceManagerInterfaceName};
import ${SessionDataPackageName}.${SessionDataClassName};
import ${SessionDataPackageName}.${SessionDataClassName}.ReturnUrlData;
import ${UserAuthorizationCheckerPackageName}.${UserAuthorizationCheckerClassName};
import ${AbstractMasterDataBaseLayoutPackageName}.${AbstractMasterDataBaseLayoutClassName};
import ${ButtonFactoryPackageName}.${ButtonFactoryClassName};
import ${ComponentFactoryPackageName}.${ComponentFactoryClassName};
import ${HeaderLayoutPackageName}.${HeaderLayoutClassName};
import ${HeaderLayoutPackageName}.${HeaderLayoutClassName}.HeaderLayoutMode;
import ${VaadinComponentPackageName}.${ServiceProviderClassName};
import lombok.Generated;
import lombok.RequiredArgsConstructor;

/**
 * A dialog to edit ${ModelClassName} details.
 *
 * ${Generated}
 */
@Generated
@Route(${ClassName}.URL)
@CssImport("./styles/shared-styles.css")
@CssImport(value = "./styles/vaadin-text-field-styles.css", themeFor = "vaadin-text-field")
@CssImport(value = "./styles/vaadin-text-area-styles.css", themeFor = "vaadin-text-area")
@CssImport(value = "./styles/vaadin-combo-box-styles.css", themeFor = "vaadin-combo-box")
@CssImport(value = "./styles/vaadin-checkbox-styles.css", themeFor = "vaadin-checkbox")
@RequiredArgsConstructor
public class ${ClassName} extends ${AbstractMasterDataBaseLayoutClassName} implements ${DetailsLayoutClassName}.Observer {

	public static final String URL = "${BaseURL}/masterdata/${PluralName}/details";

	private static final Logger logger = LogManager.getLogger(${ClassName}.class);

	@Autowired(required = false)
	private MaintenanceViewCreateNewModelModification<${ModelClassName}> createNewModelModification;
	@Autowired(required = false)
	private MaintenanceViewRenderer<${ModelClassName}> maintenanceViewRenderer;
	@Autowired(required = false)
	private DetailsLayoutComboBoxItemLabelGenerator<${ModelClassName}> comboBoxItemLabelGenerator;

	private final ${ButtonFactoryClassName} buttonFactory;
	private final ${ComponentFactoryClassName} componentFactory;
	private final ${ResourceManagerInterfaceName} resourceManager;
	private final ${MasterDataGUIConfigurationClassName} guiConfiguration;
	private final ${ServiceProviderClassName} serviceProvider;
	private final ${SessionDataClassName} session;

	private ${ModelClassName} model;

	@Override
	protected ${ButtonFactoryClassName} getButtonFactory() {
		return buttonFactory;
	}

	@Override
	protected ${ResourceManagerInterfaceName} getResourceManager() {
		return resourceManager;
	}

	@Override
	protected ${SessionDataClassName} getSessionData() {
		return session;
	}

	@Override
	public void doSetParameter(BeforeEvent event) {
		long id = parametersMap.containsKey("id") && (parametersMap.get("id").size() > 0)
				? Long.parseLong(parametersMap.get("id").get(0))
				: -1;
		model = serviceProvider.get${ServiceInterfaceName}().findById(id).orElse(createNewModel());
		if (parametersMap.containsKey("duplicate") && "true".equals(parametersMap.get("duplicate").get(0))) {
			model.setId(-1);
		}
	}

	private ${ModelClassName} createNewModel() {
		${ModelClassName} model = new ${ModelClassName}();
#if(${SubclassDataCollection.getSubclasses()})
		String modelClassName = parametersMap.containsKey("modelClass") && (parametersMap.get("modelClass").size() > 0)
				? parametersMap.get("modelClass").get(0)
				: "${ModelClassName}";
	#foreach($Subclass in ${SubclassDataCollection.getSubclasses()})
		if (modelClassName.equals("${Subclass.getModelClassName()}")) {
			model = new ${Subclass.getModelClassName()}();
			if (createNewModelModification != null) {
				model = createNewModelModification.modify(model);
			}
			return model;
		}
	#end
#end
		if (createNewModelModification != null) {
			model = createNewModelModification.modify(model);
		}
		return model;
	}

	@Override
	public void doBeforeEnter(BeforeEnterEvent beforeEnterEvent) {
		${UserAuthorizationCheckerClassName}.forwardToLoginOnNoUserSetForSession(getSessionData(), beforeEnterEvent);
		setMargin(false);
		setSizeFull();
		getStyle().set("background-image", "url('" + guiConfiguration.getBackgroundFileName() + "')");
		getStyle().set("background-size", "cover");
		getStyle().set("background-attachment", "fixed");
		add(
				new ${HeaderLayoutClassName}(
						buttonFactory
										.createBackButton(
												resourceManager,
												this::getUI,
												() -> session.getReturnUrl().orElse(new ReturnUrlData(${PageLayoutClassName}.URL)),
												session),
						buttonFactory.createLogoutButton(resourceManager, this::getUI, session, logger),
								resourceManager.getLocalizedString("${ClassName}.header.prefix.label", session.getLocalization()) + getHeaderSuffix(model),
								HeaderLayoutMode.PLAIN),
				getDetailsLayout(model));
	}

	private String getHeaderSuffix(${ModelClassName} model) {
		return maintenanceViewRenderer != null
				? maintenanceViewRenderer.getHeaderSuffix(model)
				: "" + model.get${HeaderAttributeName}();
	}

	private AbstractMasterDataBaseLayout getDetailsLayout(${ModelClassName} model) {
#foreach($Subclass in ${SubclassDataCollection.getSubclasses()}) 
		if (model.getClass() == ${Subclass.getModelClassName()}.class) {
			return new ${Subclass.getDetailsLayoutClassName()}(
					buttonFactory,
					componentFactory,
					(${Subclass.getModelClassName()}) model,
					serviceProvider,
					guiConfiguration,
					resourceManager,
					session,
					this,
					comboBoxItemLabelGenerator);
		}
#end
		return new ${DetailsLayoutClassName}(buttonFactory, componentFactory, model, serviceProvider, guiConfiguration, resourceManager, session, this, comboBoxItemLabelGenerator);
	}

	@Override
	protected void onAttach(AttachEvent attachEvent) {
		logger.info("onAttach");
		super.onAttach(attachEvent);
	}

	@Override
	protected void onDetach(DetachEvent detachEvent) {
		logger.info("onDetach");
		super.onDetach(detachEvent);
		getElement().removeFromTree();
	}

	@Override
	public void save(Object model) {
		navigateBack();
	}

	private void navigateBack() {
		ReturnUrlData urlBack = session.getReturnUrl().orElse(new ReturnUrlData(${PageLayoutClassName}.URL));
		getUI().ifPresent(ui -> ui.navigate(urlBack.getUrl(), new QueryParameters(urlBack.getParameters())));
	}

	@Override
	public void save() {
		save(model);
	}

	@Override
	public void remove() {
		serviceProvider.get${ServiceInterfaceName}().delete(model);
		navigateBack();
	}

}