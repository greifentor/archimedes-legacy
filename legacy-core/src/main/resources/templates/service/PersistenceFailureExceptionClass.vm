package ${PackageName};

import java.util.ArrayList;
import java.util.List;

import ${LocalizationModelPackageName}.${LocalizationSOClassName};
import ${ResourceManagerPackageName}.${ResourceManagerInterfaceName};
import lombok.EqualsAndHashCode;
import lombok.Generated;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.ToString;

#if (!$CommentsOff)
/**
 * A service exception for persistence failures.
 *
 * GENERATED CODE !!! DO NOT CHANGE !!!
 */
#end
@Generated
@Getter
@RequiredArgsConstructor
public class ${ClassName} extends RuntimeException {

	static final String GENERAL_RESOURCE_ID = "persistence.failure.general.label";
	static final String NO_ERRORS_FOUND_RESOURCE_ID = "persistence.failure.noErrorsFound.label";
	static final String NOT_BLANK_CONSTRAINT_VIOLATION_RESOURCE_ID =
			"persistence.failure.notBlankConstraintViolation.label";
	static final String NOT_NULL_CONSTRAINT_VIOLATION_RESOURCE_ID =
			"persistence.failure.notNullConstraintViolation.label";
	static final String UNIQUE_CONSTRAINT_VIOLATION_RESOURCE_ID = "persistence.failure.uniqueConstraintViolation.label";
	static final String VERSION_VIOLATION_RESOURCE_ID = "persistence.failure.versionViolation.label";

	public enum Reason {
		GENERAL,
		NOT_BLANK,
		NOT_NULL,
		UNIQUE,
		VERSION;
	}

	@EqualsAndHashCode
	@Getter
	@ToString
	public static class ValidationFailure {

		public ValidationFailure(Reason reason) {
			this.reason = reason;
		}

		public ValidationFailure(Reason reason, String className, String... attributeNames) {
			this(reason);
			this.className = className;
			for (String an : attributeNames) {
				this.attributeNames.add(an);
			}
		}

		private Reason reason;
		private String className;
		private List<String> attributeNames = new ArrayList<>();

	}

	private final String id;
	private final List<ValidationFailure> validationFailures;

	public String getLocalizedMessage(${ResourceManagerInterfaceName} resourceManager, ${LocalizationSOClassName} localization) {
		if (validationFailures.isEmpty()) {
			return resourceManager.getLocalizedString(NO_ERRORS_FOUND_RESOURCE_ID, localization);
		}
		return validationFailures
				.stream()
				.map(vf -> toLocalizedString(vf, resourceManager, localization))
				.reduce((s0, s1) -> s0 + "\n" + s1)
				.orElse("n/a");
	}

	private String toLocalizedString(ValidationFailure validationFailure, ${ResourceManagerInterfaceName} resourceManager,
			${LocalizationSOClassName} localization) {
		if (validationFailure.getReason() == Reason.NOT_NULL) {
			return resourceManager
					.getLocalizedString(NOT_NULL_CONSTRAINT_VIOLATION_RESOURCE_ID, localization)
					.replace("{0}", "" + getId())
					.replace("{1}", validationFailure.getClassName())
					.replace(
							"{2}",
							validationFailure
									.getAttributeNames()
									.stream()
									.sorted((s0, s1) -> s0.compareTo(s1))
									.reduce((s0, s1) -> s0 + ", " + s1)
									.orElse("n/a"));
		} else if (validationFailure.getReason() == Reason.NOT_BLANK) {
			return resourceManager
					.getLocalizedString(NOT_BLANK_CONSTRAINT_VIOLATION_RESOURCE_ID, localization)
					.replace("{0}", "" + getId())
					.replace("{1}", validationFailure.getClassName())
					.replace(
							"{2}",
							validationFailure
									.getAttributeNames()
									.stream()
									.sorted((s0, s1) -> s0.compareTo(s1))
									.reduce((s0, s1) -> s0 + ", " + s1)
									.orElse("n/a"));
		} else if (validationFailure.getReason() == Reason.UNIQUE) {
			return resourceManager
					.getLocalizedString(UNIQUE_CONSTRAINT_VIOLATION_RESOURCE_ID, localization)
					.replace("{0}", "" + getId())
					.replace("{1}", validationFailure.getClassName())
					.replace(
							"{2}",
							validationFailure
									.getAttributeNames()
									.stream()
									.sorted((s0, s1) -> s0.compareTo(s1))
									.reduce((s0, s1) -> s0 + ", " + s1)
									.orElse("n/a"));

		} else if (validationFailure.getReason() == Reason.VERSION) {
			return resourceManager
					.getLocalizedString(VERSION_VIOLATION_RESOURCE_ID, localization)
					.replace("{0}", "" + getId())
					.replace("{1}", validationFailure.getClassName());
		}
		return resourceManager
				.getLocalizedString(GENERAL_RESOURCE_ID, localization)
				.replace("{0}", "" + getId())
				.replace("{1}", validationFailure.getClassName());
	}

}