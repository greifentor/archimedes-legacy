package ${PackageName};

import java.util.List;
import java.util.Optional;

import ${PagePackageName}.${PageClassName};
import ${PagePackageName}.${PageParametersClassName};
import ${ModelPackageName}.${ModelClassName};
#if(${SubclassSelectors})
#foreach($Subclass in $Subclasses)
import ${Subclass.getModelClassNameQualified()};
#end
#end
#foreach($FindBy in $FindBys)
#if(!${FindBy.isSimpleType()})
import ${FindBy.getTypePackageName()}.${FindBy.getTypeName()};
#end
#end
#foreach($ListAccessData in $ListAccess)
#if($ListAccessData.getTypeQualifiedName())
import ${ListAccessData.getTypeQualifiedName()};
#end
#end
import lombok.Generated;

#if (${HasObjectReferences})
#foreach($FindBy in $FindBys)
import ${FindBy.getTypePackageName()}.${FindBy.getTypeName()};
#end

#end
#if (!$CommentsOff)
/**
 * A generated persistence port interface for ${ContextName} CRUD operations.
 *
 * GENERATED CODE !!! DO NOT CHANGE !!!
 */
#end
@Generated
public interface ${ClassName} {

	${ModelClassName} create(${ModelClassName} model);

	List<${ModelClassName}> findAll();

#if(${SubclassSelectors})
#foreach($Subclass in $Subclasses)
	List<${Subclass.getModelClassName()}> findAll${Subclass.getModelClassName()}();

#end
#end
	${PageClassName}<${ModelClassName}> findAll(${PageParametersClassName} pageParameters);

	Optional<${ModelClassName}> findById(${IdClassName} ${IdFieldName});

	${ModelClassName} update(${ModelClassName} model);

	void delete(${ModelClassName} model);

#foreach($FindBy in $FindBys)
#if (${FindBy.isUnique()})	Optional#{else}	List#{end}<${ModelClassName}> find#if (!${FindBy.isUnique()})All#{end}By${FindBy.getColumnName()}(${FindBy.getTypeName()} ${FindBy.getAttributeName()});

#end
#foreach($ListAccessData in $ListAccess)
	List<${ModelClassName}> findAllBy${ListAccessData.getFieldNameCamelCase()}(${ListAccessData.getTypeName()} ${ListAccessData.getFieldName()});

#end
}