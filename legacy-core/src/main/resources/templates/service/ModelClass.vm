package ${PackageName};

#foreach($Import in $ImportDeclarations.toList())
import $Import.getSingleImportDeclaration();
#if($velocityCount == $ImportDeclarations.size()) 

#end
#end
#if ($ImportLocalDate || $ImportLocalDateTime)
	#if ($ImportLocalDate)
import ${ImportLocalDate};
	#end
	#if ($ImportLocalDateTime)
import ${ImportLocalDateTime};
	#end

#end
#foreach($Impl in ${Implements.toList()})
import ${Impl.getPackageName()}.${Impl.getTypeName()};
	#if ($foreach.hasNext)#else

	#end
#end
#if ($POJOMode == "BUILDER")
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.NoArgsConstructor;
#end
import lombok.Data;
#if ($Subclass)
import lombok.EqualsAndHashCode;
#end
import lombok.Generated;
#if ($Subclass)
import lombok.ToString;
#end
#if ($POJOMode == "CHAIN")
import lombok.experimental.Accessors;
#end

#if (!$CommentsOff )
/**
 * A model for ${PluralName}.
 *
 * ${Generated}
 */
#end
#if ($POJOMode == "CHAIN")
@Accessors(chain = true)
#elseif ($POJOMode == "BUILDER")
@Builder
@AllArgsConstructor
@NoArgsConstructor
#end
@Data
#if ($Subclass)
@EqualsAndHashCode(callSuper = true)
#end
@Generated
#if ($Subclass)
@ToString(callSuper = true)
#end
public class ${ClassName} extends ${GeneratedModelClassName}#if (!${Implements.toList().isEmpty()}) implements #foreach ($I in ${Implements.toList()})${I.getTypeName()}#if ($foreach.hasNext), #end#end#end {

#foreach($Column in $ColumnData)
	@Override
	public ${ClassName} set${Column.getSetterName()}(${Column.getFieldType()} ${Column.getFieldName()}) {
		super.set${Column.getSetterName()}(${Column.getFieldName()});
		return this;
	}

#end
}