package ${PackageName};

import java.util.List;
import java.util.Optional;

import javax.inject.Inject;

import ${PagePackageName}.${PageClassName};
import ${PagePackageName}.${PageParametersClassName};
import ${ModelPackageName}.${ModelClassName};
#foreach($FindBy in $FindBys)
#if(!${FindBy.isSimpleType()})
import ${FindBy.getTypePackageName()}.${FindBy.getTypeName()};
#end
#end
#foreach($ListAccessData in $ListAccess)
#if($ListAccessData.getTypeQualifiedName())
import ${ListAccessData.getTypeQualifiedName()};
#end
#end
import ${PersistencePortPackageName}.${PersistencePortInterfaceName};
import ${ServiceInterfacePackageName}.${ServiceInterfaceName};
import lombok.Generated;

#if (${HasObjectReferences})
#foreach($FindBy in $FindBys)
import ${FindBy.getTypePackageName()}.${FindBy.getTypeName()};
#end

#end
#if (!$CommentsOff)
/**
 * A generated service interface implementation for ${ContextName} management.
 *
 * GENERATED CODE !!! DO NOT CHANGE !!!
 */
#end
@Generated
public abstract class ${ClassName} implements ${ServiceInterfaceName} {

	@Inject
	protected ${PersistencePortInterfaceName} persistencePort;

	@Override
	public ${ModelClassName} create(${ModelClassName} model) {
		return persistencePort.create(model);
	}

	@Override
	public List<${ModelClassName}> findAll() {
		return persistencePort.findAll();
	}

	@Override
	public ${PageClassName}<${ModelClassName}> findAll(${PageParametersClassName} pageParameters) {
		return persistencePort.findAll(pageParameters);
	}

	@Override
	public Optional<${ModelClassName}> findById(${IdClassName} ${IdFieldName}) {
		return persistencePort.findById(${IdFieldName});
	}

	@Override
	public ${ModelClassName} update(${ModelClassName} model) {
		return persistencePort.update(model);
	}

	@Override
	public void delete(${ModelClassName} model) {
		persistencePort.delete(model);
	}
#foreach($FindBy in $FindBys)

	@Override
	public #if (${FindBy.isUnique()})Optional#{else}List#{end}<${ModelClassName}> find#if (!${FindBy.isUnique()})All#{end}By${FindBy.getColumnName()}(${FindBy.getTypeName()} ${FindBy.getAttributeName()}) {
		return persistencePort.find#if (!${FindBy.isUnique()})All#{end}By${FindBy.getColumnName()}(${FindBy.getAttributeName()});
	}
#end
#foreach($ListAccessData in $ListAccess)

	@Override
	public List<${ModelClassName}> findAllBy${ListAccessData.getFieldNameCamelCase()}(${ListAccessData.getTypeName()} ${ListAccessData.getFieldName()}) {
		return persistencePort.findAllBy${ListAccessData.getFieldNameCamelCase()}(${ListAccessData.getFieldName()});
	}
#end

}