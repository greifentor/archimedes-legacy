package ${PackageName};

#if ($ImportLocalDate)
import ${ImportLocalDate};

#end
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.util.List;
import java.util.function.Function;

import lombok.Generated;

import ${PackageName}.converter.${SimpleClassName}SimpleFieldChangeTo${SimpleClassName}ChangeDboConverter;
import ${PackageName}.dbo.${SimpleClassName}AttributeDBO;
import ${PackageName}.dbo.${SimpleClassName}ChangeActionDBO;
import ${IdSOClassNameQualified};
import ${PersistencePortGeneratedInterfaceNameQualified};

/**
 * ${Generated}
 */
@Generated
public abstract class ${ClassName} implements ${PersistencePortGeneratedInterfaceName} {

	private static final Logger logger = LogManager.getLogger(${ClassName}.class);

	protected abstract ${SimpleClassName}SimpleFieldChangeTo${SimpleClassName}ChangeDboConverter<String> simpleFieldChangeToActionDBOConverter();

	protected abstract void processAction(${SimpleClassName}ChangeActionDBO action, ${IdSOClassName} id);

	protected <T> T getValue(List<${SimpleClassName}ChangeActionDBO> actions, ${SimpleClassName}AttributeDBO attribute,
			Function<String, T> setter, T defaultValue) {
		return actions
				.stream()
				.filter(action -> action.getAttribute() == attribute)
				.map(action -> setter.apply(action.getValue()))
				.findFirst()
				.orElse(defaultValue);
	}

#foreach($Column in $ColumnData)
	protected String get${Column.getSimpleName()}(List<${SimpleClassName}ChangeActionDBO> actions) {
		return getValue(actions, ${SimpleClassName}AttributeDBO.${Column.getEnumIdentifier()}, s -> s, "");
	}

#end
#foreach($Column in $ColumnData)
	@Override
	public void save${Column.getSimpleName()}(${IdSOClassName} id, ${Column.getFieldType()} ${Column.getFieldName()}) {
		logger.info("new ${Column.getDescriptionName()} send to persistence port: {}", ${Column.getFieldName()});
		${SimpleClassName}ChangeActionDBO action = simpleFieldChangeToActionDBOConverter().convert(${SimpleClassName}AttributeDBO.${Column.getEnumIdentifier()}, ${Column.getFieldName()});
		processAction(action, id);
	}

#end
}