package ${PackageName};

#if (${HasNotNulls} || ${HasUniques})
import static ${UtilPackageName}.Check.ensure;

#end
import java.util.List;
import java.util.Optional;

import javax.annotation.PostConstruct;
import javax.inject.Inject;

import ${PagePackageName}.${PageClassName};
import ${PagePackageName}.${PageParametersClassName};
import ${ModelPackageName}.${ModelClassName};
#foreach($Subclass in $Subclasses)
import ${Subclass.getModelClassNameQualified()};
#end
#foreach($Subclass in $Subclasses)
import ${Subclass.getDboRepositoryClassNameQualified()};
#end
#foreach($Subclass in $Subclasses)
import ${Subclass.getConverterClassNameQualified()};
#end
#foreach($FindBy in $FindBys)
#if(${FindBy.isEnumType()})
import ${FindBy.getTypePackageName()}.${FindBy.getTypeName()};
#end
#end
#foreach($ListAccessData in $ListAccess)
#if($ListAccessData.getTypeQualifiedName())
import ${ListAccessData.getTypeQualifiedName()};
#end
#end
#if (${HasNotNulls})
import ${ExceptionsPackageName}.NotNullConstraintViolationException;
#end
#if (${HasUniques})
import ${ExceptionsPackageName}.UniqueConstraintViolationException;
#end
import ${PersistencePortPackageName}.${PersistencePortInterfaceName};
import ${PageConverterPackageName}.${PageConverterClassName};
import ${PageParametersToPageableConverterPackageName}.${PageParametersToPageableConverterClassName};
import ${DBOConverterPackageName}.${DBOConverterClassName};
#foreach($FindBy in $FindBys)
#if(${FindBy.isEnumType()})
import ${FindBy.getTypeDBOConverterPackageName()}.${FindBy.getTypeDBOConverterClassName()};
#end
#end
#foreach($ListAccessData in $ListAccess)
#if($ListAccessData.getConverterData())
import ${ListAccessData.getConverterData().getQualifiedClassName()};
#end
#end
import ${DBOPackageName}.${DBOClassName};
import ${JPARepositoryPackageName}.${JPARepositoryClassName};
#if (${HasObjectReferences})
#foreach($FindBy in $FindBys)
#if (${FindBy.isObjectReference()})
import ${FindBy.getConverterPackageName()}.${FindBy.getConverterClassName()};
#end
#end
#end
#foreach($Import in $ImportDeclarations.toList())
import $Import.getSingleImportDeclaration();
#if($velocityCount == $ImportDeclarations.size()) 

#end
#end
import lombok.Generated;

#if (${HasObjectReferences})
#foreach($FindBy in $FindBys)
import ${FindBy.getTypePackageName()}.${FindBy.getTypeName()};
#end

#end
#if (!$CommentsOff )
/**
 * A generated JPA persistence adapter for ${PluralName}.
 *
 * ${Generated}
 */
#end
@Generated
public abstract class ${ClassName} implements ${PersistencePortInterfaceName} {

	@Inject
	protected ${DBOConverterClassName} converter;
#foreach($FindBy in $FindBys)
#if(${FindBy.isEnumType()})
	@Inject
	protected ${FindBy.getTypeDBOConverterClassName()} ${FindBy.getTypeDBOConverterAttributeName()};
#end
#end
#foreach($ListAccessData in $ListAccess)
#if($ListAccessData.getConverterData())
	@Inject
	protected ${ListAccessData.getConverterData().getClassName()} ${ListAccessData.getConverterData().getAttributeName()};
#end
#end
	@Inject
	protected ${JPARepositoryClassName} repository;
#if (${HasObjectReferences})
#foreach($FindBy in $FindBys)
#if (${FindBy.isObjectReference()})
	@Inject
	protected ${FindBy.getConverterClassName()} ${FindBy.getConverterAttributeName()};
#end
#end
#end
#foreach($Subclass in $Subclasses)
	@Inject
	protected ${Subclass.getConverterClassName()} ${Subclass.getConverterAttributeName()};
	@Inject
	protected ${Subclass.getDboRepositoryClassName()} ${Subclass.getDboRepositoryAttributeName()};
#end

	@Inject
	protected ${PageParametersToPageableConverterClassName} pageParametersToPageableConverter;

	protected PageConverter<${ModelClassName}, ${DBOClassName}> pageConverter;

	@PostConstruct
	public void postConstruct() {
		pageConverter = new ${PageConverterClassName}<>(converter);
	}

	@Override
	public ${ModelClassName} create(${ModelClassName} model) {
		model.set${IdFieldNameCamelCase}(${NoKeyValue});
		return converter.${ToModelMethodName}(repository.save(converter.${ToDBOMethodName}(model)));
	}

	@Override
	public List<${ModelClassName}> findAll() {
		return converter.${ToModelMethodName}(repository.findAll());
	}
#foreach($Subclass in $Subclasses)

	@Override
	public List<${Subclass.getModelClassName()}> findAll${Subclass.getModelClassName()}() {
		return ${Subclass.getConverterAttributeName()}.${ToModelMethodName}(${Subclass.getDboRepositoryAttributeName()}.findAll());
	}
#end

	@Override
	public ${PageClassName}<${ModelClassName}> findAll(${PageParametersClassName} pageParameters) {
		return pageConverter.convert(repository.findAll(pageParametersToPageableConverter.convert(pageParameters)));
	}

	@Override
	public Optional<${ModelClassName}> findById(${IdClassName} ${IdFieldName}) {
		return repository.findById(${IdFieldName}).map(dbo -> converter.${ToModelMethodName}(dbo));
	}

	@Override
	public ${ModelClassName} update(${ModelClassName} model) {
#if (${HasNotNulls})
#foreach ($Column in $ColumnData)
#if (${Column.isSimpleType()} == false and ${Column.isNotNull()} == true and ${Column.isPkMember()} == false)
		ensure(
				model.${Column.getGetterCall()} != null,
				() -> new NotNullConstraintViolationException("${ModelClassName} field ${Column.getFieldName()} cannot be null.", "${ModelClassName}", "${Column.getFieldName()}"));
#end
#end
#end
#foreach ($Column in $ColumnData)
#if (${Column.isUnique()})
		ensure(
				findBy${Column.getColumnName()}(model.${Column.getGetterCall()})
#if (${HasSimpleTypeId})
						.filter(${TableAttributeName} -> ${TableAttributeName}.get${IdFieldNameCamelCase}() != model.get${IdFieldNameCamelCase}())
#else
						.filter(${TableAttributeName} -> !${TableAttributeName}.get${IdFieldNameCamelCase}().equals(model.get${IdFieldNameCamelCase}()))
#end
						.isEmpty(),
				() -> new UniqueConstraintViolationException("${Column.getFieldName()} '" + model.${Column.getGetterCall()} + "' is already set for another record", "${ModelClassName}", "${Column.getFieldName()}"));
#end
#end
		return converter.${ToModelMethodName}(repository.save(converter.${ToDBOMethodName}(model)));
	}

	@Override
	public void delete(${ModelClassName} model) {
		repository.delete(converter.${ToDBOMethodName}(model));
	}
#foreach($FindBy in $FindBys)

	@Override
	public #if (${FindBy.isUnique()})Optional#{else}List#{end}<${ModelClassName}> find#if (!${FindBy.isUnique()})All#{end}By${FindBy.getColumnName()}(${FindBy.getTypeName()} ${FindBy.getAttributeName()}) {
#if (${FindBy.isUnique()})
	#if (${FindBy.isEnumType()})
		return Optional.ofNullable(converter.toModel(repository.findBy${FindBy.getColumnName()}(${FindBy.getTypeDBOConverterAttributeName()}.${ToDBOMethodName}(${FindBy.getDBOAttributeName()})).orElse(null)));
	#elseif (${FindBy.isObjectReference()})
		return Optional.ofNullable(converter.toModel(repository.findBy${FindBy.getColumnName()}(${FindBy.getConverterAttributeName()}.${ToDBOMethodName}(${FindBy.getAttributeName()})).orElse(null)));
	#elseif (${FindBy.isUuid()})
		return Optional.ofNullable(converter.toModel(repository.findBy${FindBy.getColumnName()}(${FindBy.getAttributeName()} != null ? ${FindBy.getAttributeName()}.toString() : null).orElse(null)));
	#else
		return Optional.ofNullable(converter.toModel(repository.findBy${FindBy.getColumnName()}(${FindBy.getAttributeName()}).orElse(null)));
	#end
#else
	#if (${FindBy.isEnumType()})
		return converter.${ToModelMethodName}(repository.findAllBy${FindBy.getColumnName()}(${FindBy.getTypeDBOConverterAttributeName()}.${ToDBOMethodName}(${FindBy.getAttributeName()})));
	#elseif (${FindBy.isObjectReference()})
		return converter.${ToModelMethodName}(repository.findAllBy${FindBy.getColumnName()}(${FindBy.getConverterAttributeName()}.${ToDBOMethodName}(${FindBy.getAttributeName()})));
	#elseif (${FindBy.isUuid()})
		return converter.${ToModelMethodName}(repository.findAllBy${FindBy.getColumnName()}(${FindBy.getAttributeName()} != null ? ${FindBy.getAttributeName()}.toString() : null));
	#else
		return converter.${ToModelMethodName}(repository.findAllBy${FindBy.getColumnName()}(${FindBy.getAttributeName()}));
	#end
#end
	}
#end
#foreach($ListAccessData in $ListAccess)

	@Override
	public List<${ModelClassName}> findAllBy${ListAccessData.getFieldNameCamelCase()}(${ListAccessData.getTypeName()} ${ListAccessData.getFieldName()}) {
#if($ListAccessData.getConverterData())
		return converter.${ToModelMethodName}(repository.findAllBy${ListAccessData.getFieldNameCamelCase()}(${ListAccessData.getConverterData().getAttributeName()}.${ToDBOMethodName}(${ListAccessData.getFieldName()})));
#else
		return converter.${ToModelMethodName}(repository.findAllBy${ListAccessData.getFieldNameCamelCase()}(${ListAccessData.getFieldName()}));
#end
	}
#end

}