package ${PackageName};

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Named;

#if ($ImportLocalDate)
import ${ImportLocalDate};

#end
import lombok.Generated;
#if (${ReferenceMode} == "OBJECT" && ${HasReferences})
import lombok.RequiredArgsConstructor;
#end

import ${DBOClassNameQualified};
import ${ModelClassNameQualified};

/**
 * A DBO converter for ${PluralName}.
 *
 * ${Generated}
 */
@Generated
@Named
#if (${ReferenceMode} == "OBJECT" && ${HasReferences})
@RequiredArgsConstructor
#end
public class ${ClassName} implements ToModelConverter<${ModelClassName}, ${DBOClassName}> {

#if (${ReferenceMode} == "OBJECT" && ${HasReferences})
#foreach($Converter in $ConverterData)
	private final ${Converter.getClassName()} ${Converter.getAttributeName()};
#if ( !$foreach.hasNext )

#end
#end
#end
	public ${DBOClassName} ${ToDBOMethodName}(${ModelClassName} model) {
		if (model == null) {
			return null;
		}
		return new ${DBOClassName}()
#foreach($Column in $ColumnData)
#if (${Column.isReference()} && ${ReferenceMode} == "OBJECT")
				.${Column.getSetterName()}(${Column.getConverterAttributeName()}.${ToDBOMethodName}(model.${Column.getGetterCall()}))#if ( !$foreach.hasNext );#end
#else
				.${Column.getSetterName()}(model.${Column.getGetterCall()})#if ( !$foreach.hasNext );#end
#end
#end
	}

	@Override
	public ${ModelClassName} ${ToModelMethodName}(${DBOClassName} dbo) {
		if (dbo == null) {
			return null;
		}
		return new ${ModelClassName}()
#foreach($Column in $ColumnData)
#if (${Column.isReference()} && ${ReferenceMode} == "OBJECT")
				.${Column.getSetterName()}(${Column.getConverterAttributeName()}.${ToModelMethodName}(dbo.${Column.getGetterCall()}))#if ( !$foreach.hasNext );#end
#else
				.${Column.getSetterName()}(dbo.${Column.getGetterCall()})#if ( !$foreach.hasNext );#end
#end
#end
	}

	@Override
	public List<${ModelClassName}> ${ToModelMethodName}(List<${DBOClassName}> dbos) {
		if (dbos == null) {
			return null;
		}
		return dbos.stream().map(this::${ToModelMethodName}).collect(Collectors.toList());
	}

}