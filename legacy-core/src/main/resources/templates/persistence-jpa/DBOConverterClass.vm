package ${PackageName};

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Named;

#if ($ImportLocalDate)
import ${ImportLocalDate};

#end
import lombok.Generated;
import lombok.RequiredArgsConstructor;

#foreach ($Subclass in $Subclasses)
import ${Subclass.getDboClassNameQualified()};
#end
import ${DBOClassNameQualified};
#foreach ($Subclass in $Subclasses)
import ${Subclass.getModelClassNameQualified()};
#end
import ${ModelClassNameQualified};

/**
 * A DBO converter for ${PluralName}.
 *
 * ${Generated}
 */
@Generated
@Named
@RequiredArgsConstructor
public class ${ClassName} implements ToModelConverter<${ModelClassName}, ${DBOClassName}> {

#if ((${ReferenceMode} == "OBJECT" && ${HasReferences}) or ${HasEnums} or ${HasMemberLists})
#foreach($Converter in $ConverterData)
	private final ${Converter.getClassName()} ${Converter.getAttributeName()};
#if ( !$foreach.hasNext )

#end
#end
#end
#foreach($Subclass in $Subclasses)
	private final ${Subclass.getConverterClassName()} ${Subclass.getConverterAttributeName()};
#if ( !$foreach.hasNext )

#end
#end
	public ${DBOClassName} ${ToDBOMethodName}(${ModelClassName} model) {
		if (model == null) {
			return null;
		}
#if (!${ModelSuperclassName})
#foreach ($Subclass in $Subclasses)
#if ($foreach.count == 1)
		if (model instanceof ${Subclass.getModelClassName()}) {
#else
		} else if (model instanceof ${Subclass.getModelClassName()}) {
#end
			return ${Subclass.getConverterAttributeName()}.${ToDBOMethodName}((${Subclass.getModelClassName()}) model);
#if (!$foreach.hasNext)
		}
#end
#end
		return new ${DBOClassName}()
#foreach ($Column in $ColumnData)
#if ((${Column.isReference()} && ${ReferenceMode} == "OBJECT") or ${Column.isEnumType()})
				.${Column.getSetterName()}(${Column.getConverterAttributeName()}.${ToDBOMethodName}(model.${Column.getGetterCall()}))#if ( !$foreach.hasNext );#end
#elseif (${Column.getFieldType()} == "LIST")
				.${Column.getSetterName()}(${Column.getConverterAttributeName()}.${ToDBOMethodName}(model.${Column.getGetterCall()}))#if ( !$foreach.hasNext );#end
#else
				.${Column.getSetterName()}(model.${Column.getGetterCall()})#if ( !$foreach.hasNext );#end
#end
#end
#else
		${DBOClassName} dbo = new ${DBOClassName}();
#foreach($Column in $ColumnData)
#if ((${Column.isReference()} && ${ReferenceMode} == "OBJECT" && !${Column.isPkMember()}) or ${Column.isEnumType()})
		dbo.${Column.getSetterName()}(${Column.getConverterAttributeName()}.${ToDBOMethodName}(model.${Column.getGetterCall()}));
#else
		dbo.${Column.getSetterName()}(model.${Column.getGetterCall()});
#end
#end
		return dbo;
#end
	}

	public List<${DBOClassName}> ${ToDBOMethodName}(List<${ModelClassName}> models) {
		if (models == null) {
			return null;
		}
		return models.stream().map(this::${ToDBOMethodName}).collect(Collectors.toList());
	}

	@Override
	public ${ModelClassName} ${ToModelMethodName}(${DBOClassName} dbo) {
		if (dbo == null) {
			return null;
		}
#if (!${DBOSuperclassName})
#foreach ($Subclass in $Subclasses)
#if ($foreach.count == 1)
		if (dbo instanceof ${Subclass.getDboClassName()}) {
#else
		} else if (dbo instanceof ${Subclass.getDboClassName()}) {
#end
			return ${Subclass.getConverterAttributeName()}.${ToModelMethodName}((${Subclass.getDboClassName()}) dbo);
#if (!$foreach.hasNext)
		}
#end
#end
		return new ${ModelClassName}()
#foreach($Column in $ColumnData)
#if ((${Column.isReference()} && ${ReferenceMode} == "OBJECT") or ${Column.isEnumType()})
				.${Column.getSetterName()}(${Column.getConverterAttributeName()}.${ToModelMethodName}(dbo.${Column.getGetterCall()}))#if ( !$foreach.hasNext );#end
#elseif (${Column.getFieldType()} == "LIST")
				.${Column.getSetterName()}(${Column.getConverterAttributeName()}.${ToModelMethodName}(dbo.${Column.getGetterCall()}))#if ( !$foreach.hasNext );#end
#else
				.${Column.getSetterName()}(dbo.${Column.getGetterCall()})#if ( !$foreach.hasNext );#end
#end
#end
#else
		${ModelClassName} model = new ${ModelClassName}();
#foreach($Column in $ColumnData)
#if ((${Column.isReference()} && ${ReferenceMode} == "OBJECT" && !${Column.isPkMember()}) or ${Column.isEnumType()})
		model.${Column.getSetterName()}(${Column.getConverterAttributeName()}.${ToModelMethodName}(dbo.${Column.getGetterCall()}));
#else
		model.${Column.getSetterName()}(dbo.${Column.getGetterCall()});
#end
#end
		return model;
#end
	}

	@Override
	public List<${ModelClassName}> ${ToModelMethodName}(List<${DBOClassName}> dbos) {
		if (dbos == null) {
			return null;
		}
		return dbos.stream().map(this::${ToModelMethodName}).collect(Collectors.toList());
	}

}